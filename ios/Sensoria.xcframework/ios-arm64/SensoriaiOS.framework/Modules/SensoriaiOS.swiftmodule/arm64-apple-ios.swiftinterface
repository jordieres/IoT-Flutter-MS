// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SensoriaiOS
import CoreBluetooth
import Foundation
import Logging
@_exported import SensoriaiOS
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct HapticError : Swift.Error {
}
public struct SensorCalibration {
  public var sensorType: SensoriaiOS.SensorType
  public var calibrationParameterA: Swift.Float32
  public var calibrationParameterB: Swift.Float32
  public var calibrationParameterC: Swift.Float32
}
public enum HapticKind : SensoriaiOS.Byte {
  case Erm
  case Lra
  public init?(rawValue: SensoriaiOS.Byte)
  public typealias RawValue = SensoriaiOS.Byte
  public var rawValue: SensoriaiOS.Byte {
    get
  }
}
public enum SdkError : Swift.Error {
  case sdkNotInitialized(message: Swift.String?)
  case sdkAlreadyInitialized(message: Swift.String?)
}
public typealias SACoreDelegate = SensoriaiOS.SADeviceBluetoothDelegate
@_inheritsConvenienceInitializers @objc open class SACore : SensoriaiOS.SADevice {
  open var s0: Swift.Int16
  open var s1: Swift.Int16
  open var s2: Swift.Int16
  open var s3: Swift.Int16
  open var s4: Swift.Int16
  open var s5: Swift.Int16
  open var s6: Swift.Int16
  open var s7: Swift.Int16
  open var accX: Swift.Float
  open var accY: Swift.Float
  open var accZ: Swift.Float
  open var gyroX: Swift.Float
  open var gyroY: Swift.Float
  open var gyroZ: Swift.Float
  open var magX: Swift.Float
  open var magY: Swift.Float
  open var magZ: Swift.Float
  open var yaw: Swift.Float
  open var pitch: Swift.Float
  open var roll: Swift.Float
  open var qX: Swift.Float
  open var qY: Swift.Float
  open var qZ: Swift.Float
  open var qW: Swift.Float
  open var temperature: Swift.Float
  open var tick: Swift.Int32
  open var fastStreamingProtocol: SensoriaiOS.FastStreamingProtocol
  open var accelerometerRange: Swift.Int16
  open var gyroscopeRange: Swift.Int16
  open var magnetometerRange: Swift.Int16
  public var kServiceUUIDSensoriaCore: Swift.String
  public var kCharacteristicUUIDSensorData: Swift.String
  public var kCharacteristicUUIDTemperature: Swift.String
  public var kServiceUUIDTemperature: Swift.String
  public var kServiceUUIDCycling: Swift.String
  public var temperatureSensorConnected: Swift.Bool
  public var kServiceUUIDControlPoint: Swift.String
  public var kCharacteristicUUIDControlPointRx: Swift.String
  public var kCharacteristicUUIDControlPointTx: Swift.String
  @objc public enum ChargingStatus : Swift.Int {
    case notCharging
    case charging
    case chargingComplete
    case unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var chargingStatus: SensoriaiOS.SACore.ChargingStatus
  @objc override dynamic public init()
  @objc override open func disconnect()
  @objc override open func resumeStreaming()
  @objc override open func pauseStreaming()
  public func resumeTemperatureStreaming()
  public func pauseTemperatureStreaming()
  public func detectConfigurationStorage() -> Swift.Bool
  public func readDataChannelSettings(channel: Swift.UInt8) throws -> SensoriaiOS.ControlPoint.DataChannelSettings?
  public func writeDataChannelSettings(channel: Swift.UInt8, samplingPeriod: SensoriaiOS.Byte, streamingProtocol: SensoriaiOS.FastStreamingProtocol, enabled: Swift.Bool, transmitBle: Swift.Bool) throws -> Swift.Bool
  public func readAccelerometerRange() throws -> Swift.Int16?
  public func writeAccelerometerRange(range: Swift.Int16) throws -> Swift.Bool
  public func readGyroscopeRange() throws -> Swift.Int16?
  public func writeGyroscopeRange(range: Swift.Int16) throws -> Swift.Bool
  public func readMagnetometerRange() throws -> Swift.Int16?
  public func writeMagnetometerRange(range: Swift.Int16) throws -> Swift.Bool
  public func readConfigurationStorage() throws -> SensoriaiOS.BaseConfigurationStorage?
  public func writeConfigurationStorage(with configuration: SensoriaiOS.BaseConfigurationStorage) throws -> Swift.Bool
  public func turnOnHapticMotor(with hapticKind: SensoriaiOS.HapticKind, strength: SensoriaiOS.Byte, onTime: SensoriaiOS.Byte, offTime: SensoriaiOS.Byte, repeatCount: SensoriaiOS.Byte = 0) throws -> Swift.Bool
  public func turnOffHapticMotor() throws -> Swift.Bool
  public func setSamplingPeriod(period: SensoriaiOS.Byte) throws -> Swift.Bool
  public func readChargingStatus() throws -> Swift.Bool
  public func setTransmissionProtocol(streamingProtocol: SensoriaiOS.FastStreamingProtocol) throws -> Swift.Bool
  @objc deinit
}
extension SensoriaiOS.SACore {
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
public struct StorageError : Swift.Error {
}
public class SessionInfo {
  public init(rootFolder: Foundation.URL)
  public func getSessionId() -> Foundation.UUID
  public func getSessionTimestamp() -> Foundation.Date
  public func getRootFolder() -> Foundation.URL
  public func getFilePrefix() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class SADataHelper : ObjectiveC.NSObject {
  @objc public static func archive(saData: SensoriaiOS.SAData) -> Foundation.Data
  @objc public static func unarchive(data: Foundation.Data) -> SensoriaiOS.SAData
  @objc public static func newSAData() -> SensoriaiOS.SAData
  @objc public static func valueOrEmpty(value: Foundation.NSNumber) -> Foundation.NSString
  @objc public static func fastStreamingProtocolRawValue(fastStreamingProtocol: SensoriaiOS.FastStreamingProtocol) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension SensoriaiOS.SAData {
  public func archive() -> Foundation.Data
  public static func unarchive(data: Foundation.Data) -> SensoriaiOS.SAData?
}
public struct ControlPointError : Swift.Error {
}
public class BaseConfigurationStorage {
  final public let headerVersion: SensoriaiOS.Byte
  public var storageType: SensoriaiOS.StorageTypes {
    get
  }
  public var serialNumber: Swift.String {
    get
  }
  open func setSerialNumber(with newSerialNumber: Swift.String) throws
  public var bodyLocation: SensoriaiOS.BodyLocation
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Crc32 {
  public func calculateCrc32AsUInt32(_ buffer: Foundation.Data, _ offset: Swift.Int = 0, _ length: Swift.Int? = nil) -> Swift.UInt32
  public func calculateCrc32AsBigEndianBytes(_ buffer: Foundation.Data, _ offset: Swift.Int = 0, _ length: Swift.Int? = nil) -> Foundation.Data
  @objc deinit
}
public enum StorageTypes : SensoriaiOS.Byte {
  case Invalid
  case BaseConfigurationStorage
  case GarmentConfigurationStorage
  public init?(rawValue: SensoriaiOS.Byte)
  public typealias RawValue = SensoriaiOS.Byte
  public var rawValue: SensoriaiOS.Byte {
    get
  }
}
@_inheritsConvenienceInitializers public class GarmentConfigurationStorage : SensoriaiOS.BaseConfigurationStorage {
  override public var storageType: SensoriaiOS.StorageTypes {
    get
  }
  public var garmentType: SensoriaiOS.GarmentType
  public var calibrationData: [SensoriaiOS.SensorCalibration]
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SensoriaSdk {
  public enum LogLevel : Swift.Int {
    case debug
    case info
    case warning
    case critical
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func initialize(enableRawDataLogging: Swift.Bool, minimumLogLevel: SensoriaiOS.SensoriaSdk.LogLevel) throws
  public static func startSession() throws -> SensoriaiOS.SessionInfo
  public static func startSession(withRootFolder rootFolder: Foundation.URL) throws -> SensoriaiOS.SessionInfo
  public static func endSession() throws -> SensoriaiOS.SessionInfo
  public static func getSessionInfo() -> SensoriaiOS.SessionInfo?
  public static func isInitialized() -> Swift.Bool
  public static func log(_ logLevel: SensoriaiOS.SensoriaSdk.LogLevel, _ message: Swift.String, _ origin: Any)
  @objc deinit
}
public class RawDataLogger {
  public static func enableLogging(_ enabled: Swift.Bool)
  public static func areLoggersEnabled() -> Swift.Bool
  public init(withDevice device: SensoriaiOS.SADevice, andLogName logName: Swift.String)
  public func logDataPoint(_ dataPoint: SensoriaiOS.SAData)
  @objc deinit
}
public enum BodyLocation : Swift.UInt32 {
  case NotOnBody, OnBody, UpperBody, LowerBody, Front, Back, Right, Left, Center
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum GarmentType : Swift.UInt32 {
  case None
  case Sock, RunningShoe, BasketShoe, SoccerShoe, SkiBoot, NordicBoot
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias Byte = Swift.UInt8
public enum ByteOrder {
  case bigEndian
  case littleEndian
  public static let nativeByteOrder: SensoriaiOS.ByteOrder
  public static func == (a: SensoriaiOS.ByteOrder, b: SensoriaiOS.ByteOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class ByteBackpacker {
  open class func unpack<T>(_ valueByteArray: [SensoriaiOS.Byte], byteOrder: SensoriaiOS.ByteOrder = .nativeByteOrder) -> T
  open class func unpack<T>(_ valueByteArray: [SensoriaiOS.Byte], toType type: T.Type, byteOrder: SensoriaiOS.ByteOrder = .nativeByteOrder) -> T
  open class func pack<T>(_ value: T, byteOrder: SensoriaiOS.ByteOrder = .nativeByteOrder) -> [SensoriaiOS.Byte]
  @objc deinit
}
extension Foundation.Data {
  public func toByteArray() -> [SensoriaiOS.Byte]
}
@_inheritsConvenienceInitializers @objc open class SAHeartMonitor : SensoriaiOS.SADevice {
  open var bpm: Swift.Int16
  open var tick: Swift.Int32
  public var kServiceUUIDGATTServiceHeartRate: Swift.String
  public var kCharacteristicUUIDSensorData: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension SensoriaiOS.SAHeartMonitor {
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc override dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
@_hasMissingDesignatedInitializers public class ControlPoint {
  public enum Command : Swift.UInt16 {
    case Unknown, SystemReadProtocolVersion, SystemReadSystemStatus, SystemRestoreDefaultSettings, SystemReset, SystemSetSleepTimeout, LedPause, LedResume, LedControlGreen, LedControlBlue, LedControlRed, SensorsAccelerometer, SensorsGyroscope, SensorsMagnetometer, SensorsAdc, DataChannelsChannel0, DataChannelsChannel1, DataChannelsChannel2, DataChannelsEvents, EepromRead, EepromWrite, EepromAcquire, EepromRelease, HapticDriverInitialize, HapticDriverAcquire, HapticDriverRelease, HapticDriverMotorOn, HapticDriverMotorOff
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum SensorImuProperty : Swift.UInt8 {
    case SamplingRateRead, SamplingRateWrite, RangeRead, RangeWrite
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum DataChannelProperty : Swift.UInt8 {
    case SettingsRead, SettingsWrite, SettingsRestoreDefault, ProtocolSet, SamplingPeriodSet, ChannelEnable, ChannelTransmitToBluetooth, ChannelLogToLocalMemory
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public struct DataChannelSettings {
    public let samplingPeriod: Swift.UInt8
    public let streamingProtocol: Swift.UInt8
    public let flags: Swift.UInt8
  }
  public static func buildReadEepromCommand(address: Swift.UInt8, length: Swift.UInt8) -> Foundation.Data
  public static func buildWriteEepromCommand(address: Swift.UInt8, payload: Foundation.Data) -> Foundation.Data?
  public static func buildCommandAndProperty(command: SensoriaiOS.ControlPoint.Command, property: Swift.UInt8, payload: Foundation.Data? = nil) -> Foundation.Data
  public static func buildCommand(command: SensoriaiOS.ControlPoint.Command, payload: Foundation.Data? = nil) -> Foundation.Data
  public enum ResponseType : Swift.UInt8 {
    case Success, Error, Nak, Unknown
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum ErrorCode : Swift.UInt32 {
    case Success, UnknownCommand, UnknownProperty, UnknownFunction, NotImplemented, EepromRead_ReadOverflow, EepromRead_InvalidCommand, EepromRead_EepromNotFound, EepromWrite_WriteOverflow, EepromWrite_InvalidCommand, EepromWrite_EepromNotFound, HapticInitialize_HapticDriverNotFound, HapticInitialize_CalibrationParametersNotFound, HapticInitialize_CalibrationFailed, HapticInitialize_Failed
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Response {
    public var responseType: SensoriaiOS.ControlPoint.ResponseType
    public var requestedCommand: SensoriaiOS.ControlPoint.Command
    public var errorCode: SensoriaiOS.ControlPoint.ErrorCode
    public var data: Foundation.Data
  }
  public static func decodeErrorResponse(response: SensoriaiOS.ControlPoint.Response) -> SensoriaiOS.ControlPointError?
  public static func decodeResponse(payload: Foundation.Data) -> SensoriaiOS.ControlPoint.Response?
  @objc deinit
}
public enum SensorType : Swift.UInt32 {
  case Unknown, Fsr, Nuanda
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers public class MulticastDelegate<T> {
  open func add(delegate: T)
  open func remove(delegate: T)
  open func invoke(invocation: (T) -> ())
  @objc deinit
}
public func += <T>(left: SensoriaiOS.MulticastDelegate<T>, right: T) where T : AnyObject
public func -= <T>(left: SensoriaiOS.MulticastDelegate<T>, right: T) where T : AnyObject
infix operator =~ : DefaultPrecedence
public struct ConnectivityError : Swift.Error {
}
public class ProcessedDataLogger {
  public static func enableLogging(_ enabled: Swift.Bool)
  public static func areLoggersEnabled() -> Swift.Bool
  public init(withLogName logName: Swift.String, andHeaders headers: Swift.String)
  public func logDataPoint(_ serializedDataPoint: Swift.String)
  @objc deinit
}
@objc public protocol SADeviceBluetoothDelegate {
  @objc optional func didConnect()
  @objc optional func didConnect(_ device: SensoriaiOS.SADevice)
  @objc optional func didConnect(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didControlPointReady()
  @objc optional func didControlPointReady(_ device: SensoriaiOS.SADevice)
  @objc optional func didControlPointReady(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didDeviceReady()
  @objc optional func didDeviceReady(_ device: SensoriaiOS.SADevice)
  @objc optional func didDeviceReady(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didStartStreaming()
  @objc optional func didStartStreaming(_ device: SensoriaiOS.SADevice)
  @objc optional func didStartStreaming(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didPauseStreaming()
  @objc optional func didPauseStreaming(_ device: SensoriaiOS.SADevice)
  @objc optional func didPauseStreaming(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didStartTemperatureStreaming()
  @objc optional func didStartTemperatureStreaming(_ device: SensoriaiOS.SADevice)
  @objc optional func didStartTemperatureStreaming(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didPauseTemperatureStreaming()
  @objc optional func didPauseTemperatureStreaming(_ device: SensoriaiOS.SADevice)
  @objc optional func didPauseTemperatureStreaming(_ device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didDisconnect(_ message: Swift.String)
  @objc optional func didDisconnect(_ message: Swift.String, device: SensoriaiOS.SADevice)
  @objc optional func didDisconnect(_ message: Swift.String, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral?)
  @objc optional func didSignalLost(_ message: Swift.String)
  @objc optional func didSignalLost(_ message: Swift.String, device: SensoriaiOS.SADevice)
  @objc optional func didSignalLost(_ message: Swift.String, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didPowerOn()
  @objc optional func didError(_ message: Swift.String)
  @objc optional func didUpdateData()
  @objc optional func didUpdateData(_ data: SensoriaiOS.SAData)
  @objc optional func didUpdateData(_ data: SensoriaiOS.SAData, device: SensoriaiOS.SADevice)
  @objc optional func didUpdateData(_ data: SensoriaiOS.SAData, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didUpdateData(_ data: SensoriaiOS.SAData, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral, characteristic: CoreBluetooth.CBCharacteristic)
  @objc optional func didScan(_ deviceName: Swift.String)
  @objc optional func didScan(_ deviceName: Swift.String, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didScan(_ deviceName: Swift.String, peripheral: CoreBluetooth.CBPeripheral, device: SensoriaiOS.SADevice)
  @objc optional func didUpdateTemperature()
  @objc optional func didUpdateTemperature(_ data: Swift.Float)
  @objc optional func didUpdateTemperature(_ data: Swift.Float, device: SensoriaiOS.SADevice)
  @objc optional func didUpdateTemperature(_ data: Swift.Float, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didUpdateTemperature(_ data: Swift.Float, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral, characteristic: CoreBluetooth.CBCharacteristic)
  @objc optional func didBatteryRead(_ batteryValue: Swift.UInt8)
  @objc optional func didBatteryRead(_ batteryValue: Swift.UInt8, device: SensoriaiOS.SADevice)
  @objc optional func didBatteryRead(_ batteryValue: Swift.UInt8, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func didReadRSSI(_ rssi: Foundation.NSNumber)
  @objc optional func didReadRSSI(_ rssi: Foundation.NSNumber, device: SensoriaiOS.SADevice)
  @objc optional func didReadRSSI(_ rssi: Foundation.NSNumber, device: SensoriaiOS.SADevice, peripheral: CoreBluetooth.CBPeripheral)
}
@_inheritsConvenienceInitializers @objc open class SADevice : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc open var deviceName: Swift.String?
  open var rawDataLogger: SensoriaiOS.RawDataLogger? {
    get
  }
  open var ready: Swift.Bool {
    get
  }
  @objc open var connected: Swift.Bool {
    get
  }
  @objc open var streaming: Swift.Bool {
    get
  }
  @objc open var temperatureStreaming: Swift.Bool {
    get
  }
  open var reconnect: Swift.Bool {
    get
  }
  @objc open var deviceCode: Swift.String? {
    get
  }
  @objc open var deviceType: SensoriaiOS.DeviceType {
    get
  }
  @objc open var deviceRSSI: Swift.Float {
    get
  }
  @objc open var timestamp: Swift.Double {
    get
  }
  @objc open var samplingFrequency: Swift.Int {
    get
  }
  @objc open var scanUseServicesList: Swift.Bool {
    get
  }
  @objc open var scanServicesList: [CoreBluetooth.CBUUID] {
    get
  }
  @objc open var scanOptionAllowDuplicatesKey: Swift.Bool {
    get
  }
  open var manualBodyLocation: SensoriaiOS.DeviceBodyLocation
  open var deviceBodyLocation: SensoriaiOS.DeviceBodyLocation {
    get
  }
  open var manualBodyPosition: SensoriaiOS.DeviceBodyPosition
  open var deviceBodyPosition: SensoriaiOS.DeviceBodyPosition {
    get
  }
  open var deviceLocationAndPosition: SensoriaiOS.DeviceLocationAndPosition {
    get
  }
  @objc open var connectingPeripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  @objc open var connectedPeripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  open var sensorDataBytes: Foundation.Data {
    get
  }
  open var sensorDataLength: Swift.Int {
    get
  }
  @objc open var battery: Swift.UInt8 {
    get
  }
  @objc open var powerOn: Swift.Bool {
    get
  }
  @objc open var date: Foundation.Date {
    get
  }
  @objc open var serialNumber: Swift.String {
    get
  }
  @objc open var firmwareRevision: Swift.String {
    get
  }
  @objc open var garmentName: Swift.String? {
    @objc get
  }
  @objc open var garmentModel: Swift.String? {
    @objc get
  }
  @objc open var garmentSerialNumber: Swift.String? {
    @objc get
  }
  @available(*, deprecated, message: "Use multiDelegate instead, unless calling from OBJC")
  @objc open var delegate: (any SensoriaiOS.SADeviceBluetoothDelegate)? {
    @objc get
    @objc set
  }
  open var multiDelegate: SensoriaiOS.MulticastDelegate<any SensoriaiOS.SADeviceBluetoothDelegate>
  @objc open var deviceNamePrefixes: [Swift.String] {
    get
  }
  @objc open var data: SensoriaiOS.SAData {
    @objc get
  }
  final public let kServiceUUIDBattery: Swift.String
  final public let kCharacteristicUUIDBattery: Swift.String
  final public let kServiceUUIDDeviceInformation: Swift.String
  final public let kCharacteristicUUIDFirmwareRevision: Swift.String
  final public let kCharacteristicUUIDSerialNumber: Swift.String
  @objc override dynamic public init()
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func archive(forKey key: Swift.String)
  public class func unarchive(forKey key: Swift.String) -> SensoriaiOS.SADevice?
  @objc open func connect(autoReconnect: Swift.Bool = true, immediateStreaming: Swift.Bool = true)
  @objc open func startReadRSSI(timeInterval: Foundation.TimeInterval = 3)
  @objc open func stopReadRSSI()
  @objc open func resumeStreaming()
  @objc open func pauseStreaming()
  @objc open func disconnect()
  @objc deinit
  @objc open func startScan()
  @objc open func stopScan()
  @objc open func readBatteryLevel()
}
extension SensoriaiOS.SADevice : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
}
extension SensoriaiOS.SADevice : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
public enum ConfigurationError : Swift.Error {
  case invalidOperation(message: Swift.String?)
  case invalidSamplingPeriod(message: Swift.String?)
}
extension SensoriaiOS.HapticKind : Swift.Equatable {}
extension SensoriaiOS.HapticKind : Swift.Hashable {}
extension SensoriaiOS.HapticKind : Swift.RawRepresentable {}
extension SensoriaiOS.SACore.ChargingStatus : Swift.Equatable {}
extension SensoriaiOS.SACore.ChargingStatus : Swift.Hashable {}
extension SensoriaiOS.SACore.ChargingStatus : Swift.RawRepresentable {}
extension SensoriaiOS.StorageTypes : Swift.Equatable {}
extension SensoriaiOS.StorageTypes : Swift.Hashable {}
extension SensoriaiOS.StorageTypes : Swift.RawRepresentable {}
extension SensoriaiOS.SensoriaSdk.LogLevel : Swift.Equatable {}
extension SensoriaiOS.SensoriaSdk.LogLevel : Swift.Hashable {}
extension SensoriaiOS.SensoriaSdk.LogLevel : Swift.RawRepresentable {}
extension SensoriaiOS.BodyLocation : Swift.Equatable {}
extension SensoriaiOS.BodyLocation : Swift.Hashable {}
extension SensoriaiOS.BodyLocation : Swift.RawRepresentable {}
extension SensoriaiOS.GarmentType : Swift.Equatable {}
extension SensoriaiOS.GarmentType : Swift.Hashable {}
extension SensoriaiOS.GarmentType : Swift.RawRepresentable {}
extension SensoriaiOS.ByteOrder : Swift.Equatable {}
extension SensoriaiOS.ByteOrder : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.Command : Swift.Equatable {}
extension SensoriaiOS.ControlPoint.Command : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.Command : Swift.RawRepresentable {}
extension SensoriaiOS.ControlPoint.SensorImuProperty : Swift.Equatable {}
extension SensoriaiOS.ControlPoint.SensorImuProperty : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.SensorImuProperty : Swift.RawRepresentable {}
extension SensoriaiOS.ControlPoint.DataChannelProperty : Swift.Equatable {}
extension SensoriaiOS.ControlPoint.DataChannelProperty : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.DataChannelProperty : Swift.RawRepresentable {}
extension SensoriaiOS.ControlPoint.ResponseType : Swift.Equatable {}
extension SensoriaiOS.ControlPoint.ResponseType : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.ResponseType : Swift.RawRepresentable {}
extension SensoriaiOS.ControlPoint.ErrorCode : Swift.Equatable {}
extension SensoriaiOS.ControlPoint.ErrorCode : Swift.Hashable {}
extension SensoriaiOS.ControlPoint.ErrorCode : Swift.RawRepresentable {}
extension SensoriaiOS.SensorType : Swift.Equatable {}
extension SensoriaiOS.SensorType : Swift.Hashable {}
extension SensoriaiOS.SensorType : Swift.RawRepresentable {}
